{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"convert",
				"convert_datetime"
			],
			[
				"show",
				"show_categories"
			],
			[
				"margin-",
				"margin-bottom"
			],
			[
				"font",
				"font-family"
			],
			[
				"margin",
				"margin-left"
			],
			[
				"se",
				"SECTION	Tag"
			],
			[
				"fnt",
				"font-family"
			],
			[
				"petro",
				"petrolum_emissions_norm"
			],
			[
				"gam_price_invest",
				"gam_price_invest_over"
			],
			[
				"lar",
				"large_field"
			],
			[
				"border-bottom-",
				"border-bottom-width"
			],
			[
				"font-",
				"font-weight"
			],
			[
				"SED",
				"SEDataZ"
			],
			[
				"SEprice",
				"SEPrice_work_tplus1"
			],
			[
				"oil",
				"oil_price_real_l6"
			],
			[
				"perc",
				"perc_75_price"
			],
			[
				"perc_",
				"perc_25_price"
			],
			[
				"av",
				"avg_price"
			],
			[
				"var_",
				"var_quantity"
			],
			[
				"mean",
				"mean_quantity"
			],
			[
				"series",
				"series_lag"
			],
			[
				"field",
				"field_inspection"
			],
			[
				"gam_price_over_",
				"gam_price_over_2d_s_price"
			],
			[
				"summar",
				"summary_over_gamma"
			],
			[
				"summary",
				"summary_comp_under"
			],
			[
				"smooth",
				"smooth_price_2"
			],
			[
				"statfjord",
				"statfjord_plot"
			],
			[
				"size",
				"size_vs_init_prod"
			],
			[
				"reco",
				"recoverable_oil"
			],
			[
				"invest_per_prd",
				"invest_per_prod_l5"
			],
			[
				"real",
				"oil_price_real"
			],
			[
				"fields",
				"fields_p"
			],
			[
				"peak",
				"peak_to_end"
			],
			[
				"res",
				"res_fit_se"
			],
			[
				"smooth_ben",
				"smooth_bench_split"
			],
			[
				"year",
				"year_prod"
			],
			[
				"min",
				"min_time_to_peak"
			],
			[
				"invest",
				"investmentMillNOK_real"
			],
			[
				"fitted",
				"fitted_year_prod"
			],
			[
				"time",
				"time_to_peak"
			]
		]
	},
	"buffers":
	[
		{
			"file": "ssb_data.py",
			"settings":
			{
				"buffer_size": 36099,
				"line_ending": "Unix"
			}
		},
		{
			"file": "maps.py",
			"settings":
			{
				"buffer_size": 13230,
				"line_ending": "Unix",
				"name": "maps.py"
			}
		},
		{
			"contents": "#norway_chl.py\n#class\n\nimport pandas as pd\nimport numpy as np\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport cartopy.io.shapereader as shpreader\nfrom matplotlib.colors import ListedColormap\n\n#class norway_chl(plt)???\nclass norway_chl(object):\n	\"\"\"Takes a dataframe with a single series with floats per \n	municipality in norway with 4-digit identifier. Outputs\n	Chloropleth map. \n	arguments:\n	df = dataframe with dataset\n	geo = name of column with SSB region identifier\n	value = name of column with value series to be plotted\n	ex: \n	norway_chl(df = mydf, geo = \"region\", value = \"value\")\n	\"\"\"\n\n	def __init__(self, df, geo = \"region\", value = \"value\"):\n		self.df = df\n		self.geo = geo\n		self.value = value\n		self.make_geo_dict()\n		#self.read_shp()\n		#self.make_color_map()\n\n\n	def make_geo_dict(self):\n		\"\"\"\n		takes dataframe and region\n		\"\"\"\n		kode = self.df[self.geo].str.split(\" \").str.get(0)\n		self.geo_dict = dict(zip(kode, self.df[self.value].values))\n		return(self.geo_dict)\n\n	def read_shp(self, adm = \"munic\"):\n		\"\"\"Input 'munic', 'county', or 'country' for level of \n		administrative detail. default is 'munic'. returns iterative\n		reader file\"\"\"\n		if adm == \"munic\":\n			shape_file = 'norway_shape/kartverket/kommuner/kommuner'\n		elif adm == \"county\":\n			shape_file = \"norway_shape/NOR_adm_shp/NOR_adm1\"\n		elif adm == \"country\":\n			shape_file = \"norway_shape/NOR_adm_shp/NOR_adm0\"\n		else:\n			shape_file = 'norway_shape/NOR_adm_shp/NOR_adm0'\n		\n		reader_file = shpreader.Reader(shape_file)\n		return(reader_file)\n\n	def make_color_map(self, num_colors=10, col_scheme = \"Greens\"):\n		if col_scheme == \"Greens\":\n			self.cmap = plt.cm.Greens\n		elif col_scheme == \"PRGn\":\n			self.cmap = plt.cm.PRGn\n		elif col_scheme == \"YlGn\":\n			self.cmap = plt.cm.YlGn\n		elif col_scheme == \"ocean\":\n			self.cmap = plt.cm.ocean\n		else:\n			self.cmap =plt.cm.Greens\n\n		vmin = self.df[self.value].min()\n		vmax = self.df[self.value].max()\n		self.norm = mpl.colors.Normalize(vmin = vmin, vmax=vmax)\n		self.bins = np.linspace(vmin, vmax, num_colors)\n		return([self.cmap, self.norm, self.bins])\n\n	def draw_map(self, title=\"title\", legend_precision = 0, col_dict={}):\n		\"\"\"\n		draws maps\n		\"\"\"\n		subplot_kw = dict(projection=ccrs.Mercator())\n\n		self.figure = plt.subplots(figsize=(10, 14),\n		                       subplot_kw=subplot_kw)\n		self.figure[1].set_frame_on(False)\n		self.figure[1].outline_patch.set_visible(False)\n		self.figure[1].background_patch.set_alpha(0)\n		#figure[0] = fig\n		#figure[1] = ax\n		self.figure[1].set_extent((2, 32.0, 56, 71))\n\n		#counties\n		reader_file = self.read_shp(\"munic\")\n		for princ, rec in zip(reader_file.geometries(), reader_file.records()):\n		    kode = rec.attributes[\"komm\"]\n		    if kode<1000:\n		        kode = \"0\" + str(kode)\n		    else:\n		        kode = str(kode)\n		    if len(col_dict)!=0:\n		    	color= col_dict[self.geo_dict[kode]] \n		    else:\n		    	color= self.cmap(self.norm(self.geo_dict[kode]))      \n		    self.figure[1].add_geometries(princ, ccrs.PlateCarree(), facecolor=color, edgecolor=\"none\")\n\n		#Norway- boundary\n		reader_norway = self.read_shp(\"country\")\n		norway = reader_norway.geometries()\n		norway_geom = next(norway)\n		self.figure[1].add_geometries(norway_geom, ccrs.PlateCarree(), facecolor=\"none\", edgecolor='black', alpha=.5)\n		\n		#cities:\n		cities = [\"Bergen\", \"Oslo\", \"Trondheim\", \"Stavanger\", \"Kristiansand\", \"TromsÃ¸\"]\n#(long, lat)\n		coords = [[5.3221, 60.3913], [10.7522, 59.9139], [10.3951, 63.4305], [5.7331, 58.9700], \n		[8.0182, 58.1599], [18.9553, 69.6492]]\n\n		#cities\n		city_coords = zip(cities, coords)\n		for city, coords in city_coords: \n			plt.text(coords[0],coords[1], city, horizontalalignment='right', transform=ccrs.Geodetic())\n		\n		ax_legend = self.figure[0].add_axes([0.7, 0.3, 0.03, 0.3], zorder=3)\n\n		#legend\n		if len(col_dict)==0:\n			ticks = np.round(self.bins[1:-1], legend_precision)\n			cb = mpl.colorbar.ColorbarBase(ax_legend, cmap=self.cmap, norm=self.norm, ticks=ticks, boundaries=self.bins, orientation='vertical')\n			cb.ax.set_title(title)\n\n		else:\n			colors = [c for c in col_dict.values()]\n			cMap = ListedColormap(colors)\n			ticks = np.linspace(1/16,1-1/16,len(col_dict))\n			cb = mpl.colorbar.ColorbarBase(ax_legend, cmap=cMap, ticks=ticks, orientation='vertical')\n			categs = [i for i in col_dict.keys()]  \n			cb.set_ticklabels(categs)\n			cb.ax.set_title(title)\n\n		return(self.figure)\n	\n	def save_plot(self, file_path):\n		self.figure[0].savefig(file_path, bbox_inches='tight')\n\n\n\n\n",
			"file": "norway_chl.py",
			"file_size": 4540,
			"file_write_time": 1486920995000000,
			"settings":
			{
				"buffer_size": 4539,
				"line_ending": "Unix",
				"name": "norway_chl.py"
			}
		},
		{
			"file": "/Users/johannesmauritzen/Python/BayesianPython/ThinkBayes2/code/thinkbayes2.py",
			"settings":
			{
				"buffer_size": 68136,
				"line_ending": "Unix"
			}
		},
		{
			"file": "kommune_clean.py",
			"settings":
			{
				"buffer_size": 1734,
				"line_ending": "Unix",
				"name": "kommune_clean.py"
			}
		},
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 11862,
				"line_ending": "Unix",
				"name": "index.html"
			}
		},
		{
			"file": "maps_notes.txt",
			"settings":
			{
				"buffer_size": 201,
				"line_ending": "Unix",
				"name": "maps_notes.txt"
			}
		},
		{
			"file": "website.css",
			"settings":
			{
				"buffer_size": 3037,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "notes.txt\n\nsources:\nhttp://www.norges-bank.no/Upload/HMS/house_price_index/p1c9.xlsx",
			"file": "notes.txt",
			"file_size": 11,
			"file_write_time": 1447683142000000,
			"settings":
			{
				"buffer_size": 84,
				"line_ending": "Unix",
				"name": "notes.txt"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"latex",
				"LaTeXTools: View PDF"
			],
			[
				"packag",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Discover Packages"
			],
			[
				"ife",
				"Snippet: Ifelse"
			],
			[
				"snippet ife",
				"Snippet: Ifelse"
			],
			[
				"snippetife",
				"Snippet: Ifelse"
			],
			[
				"snippet",
				"Snippet: Length"
			],
			[
				"sn",
				"Snippet: For Loop"
			],
			[
				"package Control: Install",
				"Package Control: Install Package"
			],
			[
				"package Control: List ",
				"Package Control: List Packages"
			],
			[
				"PACKAGE CONTROL: INSTALL",
				"Package Control: Install Package"
			],
			[
				"Package",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/johannesmauritzen/Python/BayesianPython/ThinkBayes2/code/cookie2.py",
		"/Users/johannesmauritzen/Python/BayesianPython/ThinkBayes2/code/cookie3.py",
		"/Users/johannesmauritzen/Python/BayesianPython/ThinkBayes2/code/euro3.py",
		"/Users/johannesmauritzen/Python/BayesianPython/ThinkBayes2/code/elections.py",
		"/Users/johannesmauritzen/Python/BayesianPython/ThinkBayes2/code/cookie.py",
		"/Users/johannesmauritzen/website/jmaurit.github.io/micro_ntnu.html",
		"/Users/johannesmauritzen/Google Drive/Teaching/BSRS/twitter.r",
		"/Users/johannesmauritzen/Google Drive/Teaching/Env_econ_instruments/ENE423_assignment.tex",
		"/Users/johannesmauritzen/Google Drive/Teaching/Env_econ_instruments/questions.r",
		"/Users/johannesmauritzen/Google Drive/Teaching/Env_econ_instruments/labs234.r",
		"/Users/johannesmauritzen/Google Drive/Teaching/Env_econ_instruments/R_practice.R",
		"/Users/johannesmauritzen/Google Drive/Scrapping/EJRevisions/ScrappingR.R",
		"/Users/johannesmauritzen/Google Drive/github/rOil/presentations/oil_prices.bib",
		"/Users/johannesmauritzen/Google Drive/github/rOil/presentations/oil_prices.tex",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_prices.bib",
		"/Users/johannesmauritzen/Google Drive/github/rOil/price_modeling.R",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_descriptives.R",
		"/Users/johannesmauritzen/Google Drive/github/rOil/price_modeling_alt.r",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_todo.txt",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_clean.R",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_modeling_prep.r",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_modeling_eko.r",
		"/Users/johannesmauritzen/Google Drive/github/rOil/Oil_spatial.R",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_temp.r",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_forecasting.r",
		"/Users/johannesmauritzen/Library/Application Support/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/Users/johannesmauritzen/Library/Application Support/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/Users/johannesmauritzen/Google Drive/github/rOil/presentations/apa_example.tex",
		"/Users/johannesmauritzen/Google Drive/github/rOil/presentations/oil_pres_fibe_jan2014.txt",
		"/Users/johannesmauritzen/Google Drive/github/rOil/presentations/oil_pres_fibe_jan2014.tex",
		"/Users/johannesmauritzen/Google Drive/price-spikes/r-price-spikes/AnalysisMay2013.R",
		"/Users/johannesmauritzen/Google Drive/price-spikes/AnalysisMay2013.R",
		"/Users/johannesmauritzen/Google Drive/price-spikes/priceSpikeAnalysis.R",
		"/Users/johannesmauritzen/Google Drive/elbas_efficiency/elbas_ACD.r",
		"/Users/johannesmauritzen/Google Drive/marketPower/marketPowerSeptember2013.r",
		"/Users/johannesmauritzen/Google Drive/marketPower/Analysis_may_2013.R",
		"/Users/johannesmauritzen/Google Drive/github/rOil/presentations/oil_pres_ifn.tex",
		"/Users/johannesmauritzen/Google Drive/github/rOil/presentations/oil_pres1.tex",
		"/Users/johannesmauritzen/Google Drive/github/rOil/presentations/oil_pres_ifn.txt",
		"/Users/johannesmauritzen/Desktop/website_copy/jmaurit.github.io/index.html",
		"/Users/johannesmauritzen/Google Drive/github/rOil/presentation/oil_pres1.tex",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil.R",
		"/Users/johannesmauritzen/Google Drive/github/rOil/presentations/brownbag.txt",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_pres1.tex",
		"/Users/johannesmauritzen/Desktop/extract.r",
		"/Users/johannesmauritzen/Google Drive/marketPower/cleaning.R",
		"/Users/johannesmauritzen/Google Drive/github/state_space/statespace.r",
		"/Users/johannesmauritzen/Google Drive/github/elec_wavelet/wavelet.r",
		"/Users/johannesmauritzen/Google Drive/github/rOil/reserve_forecasts.r",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_modeling.R",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_bootstrap.r",
		"/Users/johannesmauritzen/Google Drive/Oil/rOil/oil.R",
		"/Users/johannesmauritzen/Google Drive/Oil/rOil/oil_modeling_prep",
		"/Users/johannesmauritzen/Google Drive/Oil/rOil/#oil_modeling_prep.r",
		"/Users/johannesmauritzen/Google Drive/website/jmaurit.github.io/index.html",
		"/Users/johannesmauritzen/Google Drive/Oil/rOil/oil_clean.R",
		"/Users/johannesmauritzen/Google Drive/marketPower/MarketPowerAugust2013.R",
		"/Users/johannesmauritzen/Google Drive/Oil/rOil/oil_modeling.R",
		"/Users/johannesmauritzen/Library/Application Support/Sublime Text 2/Packages/Default/Default (OSX).sublime-keymap"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"CO2_emissions",
			"eksport",
			"ax[0]",
			"ax",
			"pop",
			"fylker=",
			"fylker",
			"bygging",
			"pkon",
			"imports",
			"eksport",
			"tid",
			"value",
			"df_shape",
			"df_new_rew",
			"ix",
			"household",
			"source",
			"household",
			"sect",
			"emp",
			"enter_bank",
			"emp_perc_sa",
			"unemp",
			"unemp_1000",
			"http",
			"#",
			"&",
			"\\caption{}",
			"[h]",
			"over",
			"under",
			"1",
			"under",
			"_",
			"nirupama_s._rao",
			"_",
			"\\_",
			"multiline",
			"percent",
			"\\_",
			"mohn		",
			"fields_p",
			"time_to_peak",
			"build_out",
			"postpeak",
			"gam_price_short",
			"gam_price_chart",
			"chart_over_short",
			"chart_under_short",
			"gam_price_over_2d_short",
			"gam_price_under_2d_short",
			"fields_p",
			"gam_price_pooled",
			"chart_pooled",
			"8",
			"oil_price_real_l2",
			"max_prod",
			"large_field",
			"pos_price",
			"pos_dif",
			"fields",
			"vinterdekk",
			">vinterdekk\n",
			">\n",
			"/Users/johannesmauritzen/Google Drive/oil/figures/",
			"fields_p"
		],
		"highlight": true,
		"in_selection": true,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"bal",
			"ax",
			"ax[1]",
			"ax[0]",
			"population",
			"pop",
			"okon",
			"pkon",
			"imports",
			"year",
			"folkevekst_perc",
			"df_folkevekst15",
			"folkevekst15",
			"firms",
			"currency",
			"debt",
			"source",
			"sect",
			"region",
			"df",
			"enter_bank",
			"emp_pc_sa",
			"emp_perc_sa",
			"\\\\http",
			"\\#",
			"\\&",
			"",
			"under",
			"over",
			"2",
			"over",
			"",
			"rao",
			"",
			"multline",
			"\\%",
			"",
			"fields_old",
			"peak_to_end",
			"decline",
			"prepeak",
			"gam_postpeak",
			"gam_postpeak_chart",
			"chart_postpeak_large",
			"chart_postpeak_small",
			"gam_postpeak_large",
			"gam_postpeak_small",
			"fields_old",
			"invest_pooled",
			"chart_invest",
			"short",
			"large_field",
			"max_prod",
			"after_peak",
			"neg_price",
			"neg_dif",
			"oil_long",
			"varmeovn",
			"/Users/johannesmauritzen/Google Drive/github/rOil/presentations/",
			"fields_eko"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "ssb_data.py",
					"settings":
					{
						"buffer_size": 36099,
						"regions":
						{
						},
						"selection":
						[
							[
								1952,
								2295
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2059.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "maps.py",
					"settings":
					{
						"buffer_size": 13230,
						"regions":
						{
						},
						"selection":
						[
							[
								1079,
								323
							]
						],
						"settings":
						{
							"auto_name": "maps.py",
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "norway_chl.py",
					"settings":
					{
						"buffer_size": 4539,
						"regions":
						{
						},
						"selection":
						[
							[
								4420,
								4420
							]
						],
						"settings":
						{
							"auto_name": "norway_chl.py",
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4083.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/johannesmauritzen/Python/BayesianPython/ThinkBayes2/code/thinkbayes2.py",
					"settings":
					{
						"buffer_size": 68136,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11043.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "kommune_clean.py",
					"settings":
					{
						"buffer_size": 1734,
						"regions":
						{
						},
						"selection":
						[
							[
								1633,
								1633
							]
						],
						"settings":
						{
							"auto_name": "kommune_clean.py",
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "index.html",
					"settings":
					{
						"buffer_size": 11862,
						"regions":
						{
						},
						"selection":
						[
							[
								9894,
								9894
							]
						],
						"settings":
						{
							"auto_name": "index.html",
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10759.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "maps_notes.txt",
					"settings":
					{
						"buffer_size": 201,
						"regions":
						{
						},
						"selection":
						[
							[
								199,
								199
							]
						],
						"settings":
						{
							"auto_name": "maps_notes.txt",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "website.css",
					"settings":
					{
						"buffer_size": 3037,
						"regions":
						{
						},
						"selection":
						[
							[
								196,
								196
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "notes.txt",
					"settings":
					{
						"buffer_size": 84,
						"regions":
						{
						},
						"selection":
						[
							[
								84,
								84
							]
						],
						"settings":
						{
							"auto_name": "notes.txt",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 210.0
	},
	"output.latex_log":
	{
		"height": 124.0
	},
	"replace":
	{
		"height": 92.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 261.0,
	"status_bar_visible": true
}
