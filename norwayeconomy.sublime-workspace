{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"convert",
				"convert_datetime"
			],
			[
				"show",
				"show_categories"
			],
			[
				"margin-",
				"margin-bottom"
			],
			[
				"font",
				"font-family"
			],
			[
				"margin",
				"margin-left"
			],
			[
				"se",
				"SECTION	Tag"
			],
			[
				"fnt",
				"font-family"
			],
			[
				"petro",
				"petrolum_emissions_norm"
			],
			[
				"gam_price_invest",
				"gam_price_invest_over"
			],
			[
				"lar",
				"large_field"
			],
			[
				"border-bottom-",
				"border-bottom-width"
			],
			[
				"font-",
				"font-weight"
			],
			[
				"SED",
				"SEDataZ"
			],
			[
				"SEprice",
				"SEPrice_work_tplus1"
			],
			[
				"oil",
				"oil_price_real_l6"
			],
			[
				"perc",
				"perc_75_price"
			],
			[
				"perc_",
				"perc_25_price"
			],
			[
				"av",
				"avg_price"
			],
			[
				"var_",
				"var_quantity"
			],
			[
				"mean",
				"mean_quantity"
			],
			[
				"series",
				"series_lag"
			],
			[
				"field",
				"field_inspection"
			],
			[
				"gam_price_over_",
				"gam_price_over_2d_s_price"
			],
			[
				"summar",
				"summary_over_gamma"
			],
			[
				"summary",
				"summary_comp_under"
			],
			[
				"smooth",
				"smooth_price_2"
			],
			[
				"statfjord",
				"statfjord_plot"
			],
			[
				"size",
				"size_vs_init_prod"
			],
			[
				"reco",
				"recoverable_oil"
			],
			[
				"invest_per_prd",
				"invest_per_prod_l5"
			],
			[
				"real",
				"oil_price_real"
			],
			[
				"fields",
				"fields_p"
			],
			[
				"peak",
				"peak_to_end"
			],
			[
				"res",
				"res_fit_se"
			],
			[
				"smooth_ben",
				"smooth_bench_split"
			],
			[
				"year",
				"year_prod"
			],
			[
				"min",
				"min_time_to_peak"
			],
			[
				"invest",
				"investmentMillNOK_real"
			],
			[
				"fitted",
				"fitted_year_prod"
			],
			[
				"time",
				"time_to_peak"
			]
		]
	},
	"buffers":
	[
		{
			"file": "ssb_data.py",
			"settings":
			{
				"buffer_size": 19393,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#http://ramiro.org/notebook/basemap-choropleth/\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom pyjstat import pyjstat #for reading json-stat format\nimport requests\nfrom collections import OrderedDict\n\nfrom geonamescache import GeonamesCache\n#from helpers import slug\nfrom matplotlib.patches import Polygon\nfrom matplotlib.collections import PatchCollection\nfrom mpl_toolkits.basemap import Basemap\n\npd.options.display.max_rows = 999\npd.options.display.max_columns = 50\n\n\ngc = GeonamesCache()\niso3_codes = list(gc.get_dataset_by_key(gc.get_countries(), 'iso3').keys())\n\ndf = pd.read_csv(filename, skiprows=4, usecols=cols)\ndf.set_index('Country Code', inplace=True)\ndf = df.ix[iso3_codes].dropna() # Filter out non-countries and missing values.\n\nvalues = df[year]\ncm = plt.get_cmap('Greens')\nscheme = [cm(i / num_colors) for i in range(num_colors)]\nbins = np.linspace(values.min(), values.max(), num_colors)\ndf['bin'] = np.digitize(values, bins) - 1\ndf.sort('bin', ascending=False).head(10)\n\n#mpl.style.use('map')\nfig = plt.figure(figsize=(22, 12))\n\n#ax = fig.add_subplot(111, axisbg='w', frame_on=False)\nax = fig.add_subplot(111)\nfig.suptitle('Forest area as percentage of land area in {}'.format(year), fontsize=30, y=.95)\n\nm = Basemap(lon_0=0, projection='robin')\nm.drawmapboundary(color='w')\n\nm.readshapefile(shapefile, 'units', color='#444444', linewidth=.2)\nfor info, shape in zip(m.units_info, m.units):\n  iso3 = info['ADM0_A3']\n  if iso3 not in df.index:\n      color = '#dddddd'\n  else:\n      color = scheme[df.ix[iso3]['bin']]\n\n  patches = [Polygon(np.array(shape), True)]\n  pc = PatchCollection(patches)\n  pc.set_facecolor(color)\n  ax.add_collection(pc)\n\n# Cover up Antarctica so legend can be placed over it.\nax.axhspan(0, 1000 * 1800, facecolor='w', edgecolor='w', zorder=2)\n\n# Draw color legend.\n#left, bottom, width, height\nax_legend = fig.add_axes([0.90, 0.10, 0.03, 0.4], zorder=3)\ncmap = mpl.colors.ListedColormap(scheme)\ncb = mpl.colorbar.ColorbarBase(ax_legend, cmap=cmap, ticks=bins, boundaries=bins, orientation='vertical')\ncb.ax.set_xticklabels([str(round(i, 1)) for i in bins])\n\n# Set the map footer.\nplt.annotate(descripton, xy=(-1.85, -3.2), size=14, xycoords='axes fraction')\n\nplt.show()\n\n\n#maps.py\n#global administrative areas\n#http://www.gadm.org/download\nfrom mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon\nfrom matplotlib.collections import PatchCollection\nfrom matplotlib.patches import PathPatch\nimport numpy as np\nimport pandas as pd\n\n#from BeautifulSoup import BeautifulSoup\n\n#import data on housing prices by county\nhouse_prices = pd.read_csv(\"https://data.ssb.no/api/v0/dataset/25138.csv?lang=no\", sep=\";\")\nhouse_prices.columns = [\"region\", \"type\", \"year\", \"variable\", \"price_sq_m\"]\n\nhouse_prices = house_prices[house_prices.type==\"02 Brukte eneboliger\"]\nhouse_prices = house_prices[house_prices.variable == \"Kvadratmeterpris (kr)\"]\nhouse_prices = house_prices[house_prices.year==2014]\n\nfylke = house_prices.region.values\n\nfylke2 = [\"Østfold\", \"Akershus\", \"Oslo\", \"Hedmark\",\n \"Oppland\", \"Buskerud\", \"Vestvold\", \"Telemark\", \"Aust-Agder\",\n  \"Vest-Agder\", \"Rogaland\", \"Hordaland\", \"Sogn og Fjordane\", \n  \"Møre og Romsdal\", \"Sør-Trøndelag\", \"Nord-Trøndelag\", \"Nordland\", \n  \"Troms\", \"Finnmark\"] \nfylke_dict = dict(zip(fylke, fylke2))\n\nhouse_prices[\"counties\"] = [fylke_dict[county] for county in house_prices.region]\ndel house_prices[\"region\"]\n[\"price_sq_m\", \"counties\"]\n\n\nfig=plt.figure(figsize=(15,10))\nax  = fig.add_subplot(111)\n\n#map instance\nm = Basemap(llcrnrlon=3.,llcrnrlat=57.,\\\n      urcrnrlon=33.,urcrnrlat=72.,\\\n            resolution='i',projection='merc')\n            #lat_0=2.5,lon_0=58.)\n\nm.readshapefile('norway_shape/NOR_adm_shp/NOR_adm0', \"norway\")\nm.readshapefile('norway_shape/NOR_adm_shp/NOR_adm1', \"counties\")\n\nshapes=[]\nnames = []\nfor info, shape in zip(m.counties_info, m.counties):\n  shapes.append(shape)\n  names.append(info[\"NAME_1\"])\n\nnames_series = pd.Series(names)\nnames_series = names_series[~names_series.duplicated()]\n\nnames_series2 = [\"Østfold\"]\nfor f in names_series[1:]:\n  names_series2.append(f)\n\nshape_fylke_dict2 = dict(zip(names_series, names_series2))\n\n#now create dataframe with shapefiles and names\ndf_shape = pd.DataFrame()\ndf_shape[\"counties\"] = [shape_fylke_dict2[name] for name in names]\ndf_shape[\"shapes\"] = shapes\n\ndf_shape = df_shape.merge(house_prices[[\"price_sq_m\", \"counties\"]], on=\"counties\")\ndf_shape[\"price_sq_m\"] = df_shape[\"price_sq_m\"].astype(float)\n\n#create different colors\nnum_colors = 9\nvalues = df_shape[\"price_sq_m\"]\ncm = plt.get_cmap('Greens')\nscheme = [cm(i / num_colors) for i in range(num_colors)]\nbins = np.linspace(values.min(), values.max(), num_colors)\ndf_shape['bin'] = np.digitize(values, bins) - 1\n#df.sort('bin', ascending=False).head(10)\n\ndef add_polys(shape_row):\n  color = scheme[shape_row.bin]\n  patches = [Polygon(np.array(shape_row.shapes), True)]\n  pc = PatchCollection(patches)\n  pc.set_facecolor(color)\n  ax.add_collection(pc) \n\ndf_shape.apply(add_polys, axis=1)\n\nplt.show()\n\n\n#add municipalities:\n#innflytting siste 9 kvartaler\n#new_res = pd.read_csv(\"https://data.ssb.no/api/v0/dataset/1106.csv?lang=eng\", sep=\";\")\n\n\n\nres_url = \"https://data.ssb.no/api/v0/dataset/1106.json?lang=no\"\ndata = requests.get(res_url)\nres_data = pyjstat.from_json_stat(data.json(object_pairs_hook=OrderedDict))\n\nnew_res = res_data[0]\nnew_res.columns = [\"princ\", \"variable\", \"quarter\", \"value\"]\nfolkevekst = new_res[new_res.variable==\"Folkevekst\"]\nfolkevekst15 = folkevekst[folkevekst.quarter == \"2015K3\"]\nfolketall = new_res[new_res.variable ==\"Folketalet ved utgangen av kvartalet\"]\nfolketall15 = folketall[folketall.quarter ==\"2015K3\"]\nfolkevekst15 = folkevekst15.merge(folketall15[[\"princ\", \"value\"]], on=\"princ\")\nfolkevekst15.columns = [\"princ\", \"variable\", \"quarter\", \"folkevekst\", \"folketall\"]\nfolkevekst15[\"folkevekst_perc\"] = 100* folkevekst15.folkevekst/folkevekst15.folketall\n\n#get kommune num to match with shape data\nssb_kommune = pd.read_csv(\"ssb_kommune.csv\")\ndel ssb_kommune[\"Unnamed: 0\"]\nssb_kommune.columns =[\"kode\", \"princ\"]\n\nfolkevekst15 = folkevekst15.merge(ssb_kommune, on=\"princ\", how=\"left\")\n\n\n\n\nfig=plt.figure(figsize=(15,10))\nax  = fig.add_subplot(111)\n\n#map instance\nm = Basemap(llcrnrlon=3.,llcrnrlat=57.,\\\n      urcrnrlon=33.,urcrnrlat=72.,\\\n            resolution='i',projection='merc')\n            #lat_0=2.5,lon_0=58.)\n\nm.readshapefile('norway_shape/NOR_adm_shp/NOR_adm0', \"norway\")\nm.readshapefile('norway_shape/kartverket/kommuner/kommuner', \"princ\", drawbounds=False)\n\nshapes=[]\nkode = []\nnames = []\nfor info, shape in zip(m.princ_info, m.princ):\n  shapes.append(shape)\n  kode.append(info[\"komm\"])\n  names.append(info[\"navn\"])\n\ndf_folkevekst15 = pd.DataFrame()\ndf_folkevekst15[\"shapes\"] = shapes\ndf_folkevekst15[\"kode\"] = kode\n\n#merge with ssb data\ndf_folkevekst15 = df_folkevekst15.merge(folkevekst15, on=\"kode\", how=\"left\")\n\n#create different colors for map\nnum_colors = 20\nvalues = df_folkevekst15[\"folkevekst_perc\"].astype(float)\ncm = plt.get_cmap('Greens')\nscheme = [cm(i / num_colors) for i in range(num_colors)]\nbins = np.linspace(values.min(), values.max(), num_colors)\ndf_folkevekst15['bin'] = np.digitize(values, bins) - 1\ndf_folkevekst15.sort_values('bin', ascending=False).head(10)\n\ndef add_polys(shape_row):\n  color = scheme[shape_row.bin]\n  patches = [Polygon(np.array(shape_row.shapes), True)]\n  pc = PatchCollection(patches)\n  pc.set_facecolor(color)\n  ax.add_collection(pc) \n\ndf_folkevekst15.apply(add_polys, axis=1)\n\n\n#princ_dict = dict(zip(shape_princ.values, data_princ.values))\n\nplt.show()\n\n\n\n\n\n\n",
			"file": "maps.py",
			"file_size": 7736,
			"file_write_time": 1457465500000000,
			"settings":
			{
				"buffer_size": 7662,
				"line_ending": "Unix",
				"name": "maps.py"
			}
		},
		{
			"file": "kommune_clean.py",
			"settings":
			{
				"buffer_size": 1734,
				"line_ending": "Unix",
				"name": "kommune_clean.py"
			}
		},
		{
			"file": "maps_notes.txt",
			"settings":
			{
				"buffer_size": 201,
				"line_ending": "Unix",
				"name": "maps_notes.txt"
			}
		},
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 8060,
				"line_ending": "Unix",
				"name": "index.html"
			}
		},
		{
			"file": "website.css",
			"settings":
			{
				"buffer_size": 3037,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "notes.txt\n\nsources:\nhttp://www.norges-bank.no/Upload/HMS/house_price_index/p1c9.xlsx",
			"file": "notes.txt",
			"file_size": 11,
			"file_write_time": 1447683142000000,
			"settings":
			{
				"buffer_size": 84,
				"line_ending": "Unix",
				"name": "notes.txt"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"latex",
				"LaTeXTools: View PDF"
			],
			[
				"packag",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Discover Packages"
			],
			[
				"ife",
				"Snippet: Ifelse"
			],
			[
				"snippet ife",
				"Snippet: Ifelse"
			],
			[
				"snippetife",
				"Snippet: Ifelse"
			],
			[
				"snippet",
				"Snippet: Length"
			],
			[
				"sn",
				"Snippet: For Loop"
			],
			[
				"package Control: Install",
				"Package Control: Install Package"
			],
			[
				"package Control: List ",
				"Package Control: List Packages"
			],
			[
				"PACKAGE CONTROL: INSTALL",
				"Package Control: Install Package"
			],
			[
				"Package",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/johannesmauritzen/website/jmaurit.github.io/micro_ntnu.html",
		"/Users/johannesmauritzen/Google Drive/Teaching/BSRS/twitter.r",
		"/Users/johannesmauritzen/Google Drive/Teaching/Env_econ_instruments/ENE423_assignment.tex",
		"/Users/johannesmauritzen/Google Drive/Teaching/Env_econ_instruments/questions.r",
		"/Users/johannesmauritzen/Google Drive/Teaching/Env_econ_instruments/labs234.r",
		"/Users/johannesmauritzen/Google Drive/Teaching/Env_econ_instruments/R_practice.R",
		"/Users/johannesmauritzen/Google Drive/Scrapping/EJRevisions/ScrappingR.R",
		"/Users/johannesmauritzen/Google Drive/github/rOil/presentations/oil_prices.bib",
		"/Users/johannesmauritzen/Google Drive/github/rOil/presentations/oil_prices.tex",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_prices.bib",
		"/Users/johannesmauritzen/Google Drive/github/rOil/price_modeling.R",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_descriptives.R",
		"/Users/johannesmauritzen/Google Drive/github/rOil/price_modeling_alt.r",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_todo.txt",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_clean.R",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_modeling_prep.r",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_modeling_eko.r",
		"/Users/johannesmauritzen/Google Drive/github/rOil/Oil_spatial.R",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_temp.r",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_forecasting.r",
		"/Users/johannesmauritzen/Library/Application Support/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/Users/johannesmauritzen/Library/Application Support/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/Users/johannesmauritzen/Google Drive/github/rOil/presentations/apa_example.tex",
		"/Users/johannesmauritzen/Google Drive/github/rOil/presentations/oil_pres_fibe_jan2014.txt",
		"/Users/johannesmauritzen/Google Drive/github/rOil/presentations/oil_pres_fibe_jan2014.tex",
		"/Users/johannesmauritzen/Google Drive/price-spikes/r-price-spikes/AnalysisMay2013.R",
		"/Users/johannesmauritzen/Google Drive/price-spikes/AnalysisMay2013.R",
		"/Users/johannesmauritzen/Google Drive/price-spikes/priceSpikeAnalysis.R",
		"/Users/johannesmauritzen/Google Drive/elbas_efficiency/elbas_ACD.r",
		"/Users/johannesmauritzen/Google Drive/marketPower/marketPowerSeptember2013.r",
		"/Users/johannesmauritzen/Google Drive/marketPower/Analysis_may_2013.R",
		"/Users/johannesmauritzen/Google Drive/github/rOil/presentations/oil_pres_ifn.tex",
		"/Users/johannesmauritzen/Google Drive/github/rOil/presentations/oil_pres1.tex",
		"/Users/johannesmauritzen/Google Drive/github/rOil/presentations/oil_pres_ifn.txt",
		"/Users/johannesmauritzen/Desktop/website_copy/jmaurit.github.io/index.html",
		"/Users/johannesmauritzen/Google Drive/github/rOil/presentation/oil_pres1.tex",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil.R",
		"/Users/johannesmauritzen/Google Drive/github/rOil/presentations/brownbag.txt",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_pres1.tex",
		"/Users/johannesmauritzen/Desktop/extract.r",
		"/Users/johannesmauritzen/Google Drive/marketPower/cleaning.R",
		"/Users/johannesmauritzen/Google Drive/github/state_space/statespace.r",
		"/Users/johannesmauritzen/Google Drive/github/elec_wavelet/wavelet.r",
		"/Users/johannesmauritzen/Google Drive/github/rOil/reserve_forecasts.r",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_modeling.R",
		"/Users/johannesmauritzen/Google Drive/github/rOil/oil_bootstrap.r",
		"/Users/johannesmauritzen/Google Drive/Oil/rOil/oil.R",
		"/Users/johannesmauritzen/Google Drive/Oil/rOil/oil_modeling_prep",
		"/Users/johannesmauritzen/Google Drive/Oil/rOil/#oil_modeling_prep.r",
		"/Users/johannesmauritzen/Google Drive/website/jmaurit.github.io/index.html",
		"/Users/johannesmauritzen/Google Drive/Oil/rOil/oil_clean.R",
		"/Users/johannesmauritzen/Google Drive/marketPower/MarketPowerAugust2013.R",
		"/Users/johannesmauritzen/Google Drive/Oil/rOil/oil_modeling.R",
		"/Users/johannesmauritzen/Library/Application Support/Sublime Text 2/Packages/Default/Default (OSX).sublime-keymap"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"value",
			"df_shape",
			"df_new_rew",
			"ix",
			"household",
			"source",
			"household",
			"sect",
			"emp",
			"enter_bank",
			"emp_perc_sa",
			"unemp",
			"unemp_1000",
			"http",
			"#",
			"&",
			"\\caption{}",
			"[h]",
			"over",
			"under",
			"1",
			"under",
			"_",
			"nirupama_s._rao",
			"_",
			"\\_",
			"multiline",
			"percent",
			"\\_",
			"mohn		",
			"fields_p",
			"time_to_peak",
			"build_out",
			"postpeak",
			"gam_price_short",
			"gam_price_chart",
			"chart_over_short",
			"chart_under_short",
			"gam_price_over_2d_short",
			"gam_price_under_2d_short",
			"fields_p",
			"gam_price_pooled",
			"chart_pooled",
			"8",
			"oil_price_real_l2",
			"max_prod",
			"large_field",
			"pos_price",
			"pos_dif",
			"fields",
			"vinterdekk",
			">vinterdekk\n",
			">\n",
			"/Users/johannesmauritzen/Google Drive/oil/figures/",
			"fields_p"
		],
		"highlight": true,
		"in_selection": true,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"folkevekst_perc",
			"df_folkevekst15",
			"folkevekst15",
			"firms",
			"currency",
			"debt",
			"source",
			"sect",
			"region",
			"df",
			"enter_bank",
			"emp_pc_sa",
			"emp_perc_sa",
			"\\\\http",
			"\\#",
			"\\&",
			"",
			"under",
			"over",
			"2",
			"over",
			"",
			"rao",
			"",
			"multline",
			"\\%",
			"",
			"fields_old",
			"peak_to_end",
			"decline",
			"prepeak",
			"gam_postpeak",
			"gam_postpeak_chart",
			"chart_postpeak_large",
			"chart_postpeak_small",
			"gam_postpeak_large",
			"gam_postpeak_small",
			"fields_old",
			"invest_pooled",
			"chart_invest",
			"short",
			"large_field",
			"max_prod",
			"after_peak",
			"neg_price",
			"neg_dif",
			"oil_long",
			"varmeovn",
			"/Users/johannesmauritzen/Google Drive/github/rOil/presentations/",
			"fields_eko"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "ssb_data.py",
					"settings":
					{
						"buffer_size": 19393,
						"regions":
						{
						},
						"selection":
						[
							[
								966,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "maps.py",
					"settings":
					{
						"buffer_size": 7662,
						"regions":
						{
						},
						"selection":
						[
							[
								7658,
								7658
							]
						],
						"settings":
						{
							"auto_name": "maps.py",
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7555.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "kommune_clean.py",
					"settings":
					{
						"buffer_size": 1734,
						"regions":
						{
						},
						"selection":
						[
							[
								1633,
								1633
							]
						],
						"settings":
						{
							"auto_name": "kommune_clean.py",
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 955.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "maps_notes.txt",
					"settings":
					{
						"buffer_size": 201,
						"regions":
						{
						},
						"selection":
						[
							[
								199,
								199
							]
						],
						"settings":
						{
							"auto_name": "maps_notes.txt",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "index.html",
					"settings":
					{
						"buffer_size": 8060,
						"regions":
						{
						},
						"selection":
						[
							[
								7671,
								7671
							]
						],
						"settings":
						{
							"auto_name": "index.html",
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8186.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "website.css",
					"settings":
					{
						"buffer_size": 3037,
						"regions":
						{
						},
						"selection":
						[
							[
								196,
								196
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "notes.txt",
					"settings":
					{
						"buffer_size": 84,
						"regions":
						{
						},
						"selection":
						[
							[
								84,
								84
							]
						],
						"settings":
						{
							"auto_name": "notes.txt",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 210.0
	},
	"output.latex_log":
	{
		"height": 124.0
	},
	"replace":
	{
		"height": 92.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 261.0,
	"status_bar_visible": true
}
